// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum PaymentMethod {
    CASH
    CARD
    MOBILE_MONEY
    BANK_TRANSFER
    SPLIT_PAYMENT
}

enum PaymentStatus {
    PAID
    PENDING
    REFUNDED
}

enum UserRole {
    ADMIN
    MANAGER
    CASHIER
}

enum PurchaseOrderStatus {
    PENDING
    RECEIVED
    CANCELLED
}

enum SessionStatus {
    OPEN
    CLOSED
}

enum SaleStatus {
    PENDING
    COMPLETED
    CANCELLED
}

model User {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    firstName       String
    lastName        String
    refreshToken    String?
    email           String            @unique
    password        String
    role            UserRole          @default(ADMIN)
    sales           Sale[]
    billings        Billing[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    CheckoutSession CheckoutSession[]
    ProductCheckIn  ProductCheckIn[]
}

model Supplier {
    id                 String               @id @default(auto()) @map("_id") @db.ObjectId
    name               String
    phone              String?
    email              String?
    products           Product[]
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    ProductCheckIn     ProductCheckIn[]
    ProductCheckinItem ProductCheckinItem[]
}

model Customer {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    phone         String?  @unique
    email         String?  @unique
    loyaltyPoints Int      @default(0)
    sales         Sale[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model CheckoutSession {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    cashierId   String        @db.ObjectId
    cashier     User          @relation(fields: [cashierId], references: [id])
    openingCash Float
    closingCash Float?
    sales       Sale[]
    status      SessionStatus @default(OPEN)
    startedAt   DateTime      @default(now())
    endedAt     DateTime?
}

model StoreLocation {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    address         String?
    currency        String
    taxRate         Float            @default(0)
    phone           String?
    stocks          Stock[]
    productCheckins ProductCheckIn[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model Billing {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    amount    Float
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    sku                 String               @unique
    barcode             String?              @unique
    categoryId          String?              @db.ObjectId
    category            ProductCategory?     @relation(fields: [categoryId], references: [id])
    unit                String
    costPrice           Float
    sellingPrice        Float
    reorderLevel        Int                  @default(0)
    isActive            Boolean              @default(true)
    description         String?              @db.String
    images              ProductImage[]
    stock               Stock[]
    saleItems           SaleItem[]
    productCheckinItems ProductCheckinItem[]
    returns             Return[]
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    Supplier            Supplier?            @relation(fields: [supplierId], references: [id])
    supplierId          String?              @db.ObjectId
}

model ProductImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductCategory {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    products    Product[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Stock {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    productId  String        @db.ObjectId
    product    Product       @relation(fields: [productId], references: [id])
    locationId String        @db.ObjectId
    location   StoreLocation @relation(fields: [locationId], references: [id])
    quantity   Int           @default(0)
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

model ProductCheckIn {
    id         String               @id @default(auto()) @map("_id") @db.ObjectId
    locationId String               @db.ObjectId
    location   StoreLocation        @relation(fields: [locationId], references: [id])
    userId     String               @db.ObjectId
    user       User                 @relation(fields: [userId], references: [id])
    totalSpent Float                @default(0)
    items      ProductCheckinItem[]
    status     PurchaseOrderStatus  @default(PENDING)
    createdAt  DateTime             @default(now())
    updatedAt  DateTime             @updatedAt
    Supplier   Supplier?            @relation(fields: [supplierId], references: [id])
    supplierId String?              @db.ObjectId
}

model ProductCheckinItem {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    productCheckinId String         @db.ObjectId
    productCheckin   ProductCheckIn @relation(fields: [productCheckinId], references: [id])
    supplierId       String?        @db.ObjectId
    supplier         Supplier?      @relation(fields: [supplierId], references: [id])
    productId        String         @db.ObjectId
    product          Product        @relation(fields: [productId], references: [id])
    quantity         Int
    costPrice        Float
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}

model Sale {
    id                String           @id @default(auto()) @map("_id") @db.ObjectId
    checkoutSession   CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])
    checkoutSessionId String?          @db.ObjectId
    customerId        String?          @db.ObjectId
    totalAmount       Float
    paymentStatus     PaymentStatus    @default(PAID)
    paymentMethod     PaymentMethod
    saleItems         SaleItem[]
    payments          Payment[]
    returns           Return[]
    status            SaleStatus       @default(PENDING)
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    saleDate          DateTime         @default(now())
    User              User?            @relation(fields: [userId], references: [id])
    userId            String?          @db.ObjectId
    Customer          Customer?        @relation(fields: [customerId], references: [id])
}

model SaleItem {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    saleId    String   @db.ObjectId
    sale      Sale     @relation(fields: [saleId], references: [id])
    productId String   @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    quantity  Int
    unitPrice Float
    discount  Float    @default(0)
    subtotal  Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    saleId      String        @db.ObjectId
    sale        Sale          @relation(fields: [saleId], references: [id])
    amount      Float
    method      PaymentMethod
    reference   String?
    paymentDate DateTime      @default(now())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model Return {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    saleId     String   @db.ObjectId
    sale       Sale     @relation(fields: [saleId], references: [id])
    productId  String   @db.ObjectId
    product    Product  @relation(fields: [productId], references: [id])
    quantity   Int
    reason     String?
    returnDate DateTime @default(now())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}
